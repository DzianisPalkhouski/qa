{
	"info": {
		"_postman_id": "24a2a11e-464b-4ff1-9ea3-d287f0095ae4",
		"name": "Collection Two",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsontoken = pm.response.json ();",
							"pm.environment.set (\"token\", jsontoken.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "dzianis_palkhouski",
							"type": "text"
						},
						{
							"key": "password",
							"value": "seniorqa2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"const schema = {\"type\": \"object\", \"properties\":",
							"{\"person\": {\"type\": \"object\", \"properties\":",
							"    {\"u_age\": {\"type\": \"integer\"},",
							"    \"u_name\": {\"type\": \"array\", \"items\": [",
							"        {\"type\": \"string\"},",
							"        {\"type\": \"integer\"},",
							"        {\"type\": \"integer\"} ] },",
							"    \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"    }",
							"},",
							"    \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"],    ",
							"\"qa_salary_after_12_months\": {\"type\": \"integer\"},",
							"\"qa_salary_after_6_months\": {\"type\": \"integer\"},",
							"\"start_qa_salary\": {\"type\": \"integer\"},",
							"\"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\",\"start_qa_salary\"]",
							"    } ",
							"}",
							"const resp = pm.response.json ();",
							"pm.test ('Schema is valid', function () {",
							"    pm.expect(tv4.validate(resp, schema)).to.be.true",
							"})",
							"",
							"let start_qa_salary = JSON.parse (request.data).salary;",
							"let qa_salary_after_6_months = resp.qa_salary_after_6_months;",
							"let qa_salary_after_12_months = resp.qa_salary_after_12_months;",
							"let qa_salary_after_18_months = resp.person.u_salary_1_5_year;",
							"pm.test ('Checking the coefficients', function () {",
							"    pm.expect (start_qa_salary*2) .to.eql (qa_salary_after_6_months);",
							"    pm.expect (start_qa_salary*2.9) .to.eql (qa_salary_after_12_months);",
							"    pm.expect (start_qa_salary*4) .to.eql (qa_salary_after_18_months)",
							"})",
							"",
							"pm.environment.set (\"u_salary_1_5_year\", resp.person.u_salary_1_5_year)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 30,\n    \"salary\": 2000,\n    \"name\": \"Dzianis\",\n    \"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"const schema = {\"type\": \"object\", \"properties\": {",
							"\"age\": {\"type\": \"integer\"},",
							"\"name\": {\"type\": \"string\"},",
							"\"salary\": {\"type\": \"array\", \"items\": [",
							"    {\"type\": \"integer\"},",
							"    {\"type\": \"string\"},",
							"    {\"type\": \"string\"} ] },",
							"\"required\": [\"age\", \"name\", \"salary\"] }",
							"}",
							"const resp = pm.response.json ();",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(tv4.validate(resp, schema)).to.be.true",
							"})",
							"",
							"let salary = request.data.salary;",
							"let double_salary = resp.salary[1];",
							"let triple_salary = resp.salary[2];",
							"pm.test ('Checking the coefficients', function () {",
							"    pm.expect (salary*2 == double_salary) .to.be.true;",
							"    pm.expect (salary*3 == triple_salary) .to.be.true",
							"})",
							"",
							"pm.test ('Ð¡hecking the second element of the array', function () {",
							"    pm.expect (triple_salary > double_salary) .to.be.true;",
							"    pm.expect (triple_salary > salary) .to.be.true",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Dzianis",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"const schema = {\"type\": \"object\", \"properties\": {",
							"\"age\": {\"type\": \"number\"},",
							"\"daily_food\": {\"type\": \"number\"},",
							"\"daily_sleep\": {\"type\": \"number\"},",
							"\"name\": {\"type\": \"string\"} },",
							"\"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"]",
							"}",
							"const resp = pm.response.json ();",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(tv4.validate(resp, schema)).to.be.true",
							"})",
							"",
							"let weight = request.data.weight;",
							"let daily_food = resp.daily_food;",
							"let daily_sleep = resp.daily_sleep;",
							"pm.test ('Checking the coefficients', function () {",
							"    pm.expect (weight*0.012) .to.eql (daily_food);",
							"    pm.expect (weight*2.5) .to.eql (daily_sleep)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "7",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "19",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kenny",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"const schema = {\"type\": \"object\", \"properties\": {",
							"\"age\": {\"type\": \"string\"},",
							"\"family\": {\"type\": \"object\", \"properties\": {",
							"    \"children\": {\"type\": \"array\", \"items\": [",
							"        {\"type\": \"array\", \"items\": [",
							"            {\"type\": \"string\"},",
							"            {\"type\": \"integer\"} ]",
							"        },",
							"        {\"type\": \"array\", \"items\": [",
							"            {\"type\": \"string\"},",
							"            {\"type\": \"integer\"} ]",
							"        } ]",
							"    },",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"},",
							"    \"required\": [\"children\", \"u_salary_1_5_year\"] },",
							"\"name\": {\"type\": \"string\"},",
							"\"salary\": {\"type\": \"integer\"} },",
							"\"required\": [\"age\", \"family\", \"name\", \"salary\"]",
							"}",
							"const resp = pm.response.json ();",
							"pm.test('Schema is valid', function () {",
							"    pm.expect(tv4.validate(resp, schema)).to.be.true",
							"})",
							"",
							"let reqname = pm.environment.get (\"name\");",
							"let respname = resp.name;",
							"pm.test ('Matching the name', function () {",
							"    pm.expect (reqname) .to.eql (respname)",
							"})",
							"",
							"let reqage = request.data.age;",
							"let respage = resp.age;",
							"pm.test ('Matching the age', function () {",
							"    pm.expect (reqage) .to.eql (respage)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json ();",
							"const length = response.length;",
							"const token = pm.environment.get (\"token\");",
							"let Valid_ID = [];",
							"let Cur_ID = 0;",
							"for (let i = 0; i < length; i++) {",
							"Cur_ID = response[i].Cur_ID;",
							"pm.sendRequest (",
							"{   url: \"http://162.55.220.72:5005/curr_byn\",",
							"    method: \"POST\",",
							"    body: {",
							"    mode: \"formdata\",",
							"    \"formdata\": [",
							"        {key: \"auth_token\", value: token},",
							"        {key: \"curr_code\", value: Cur_ID}",
							"        ]",
							"    }",
							"}, function (err, resp) {",
							"    if (resp.code == 200) {",
							"    console.log (resp.json ());",
							"    Valid_ID.push (resp.json ().Cur_ID);",
							"    console.log (Valid_ID)",
							"}",
							"    if (resp.code == 500)",
							"    console.log (\"Invalid ID\") ",
							"        }",
							"    )",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		}
	]
}